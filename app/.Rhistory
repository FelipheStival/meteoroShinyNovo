)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados_glm = gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
# Obtemos assim os indicadores BLUE e BLUP
indicadores_bind = tibble(`Codigodo Experimento` = tab_resultados$id_ensaio,
`Média BLUP (kg/ha)` = round(tab_resultados$MediaPonderada,0),
`Valor BIC (BLUP)` = round(tab_resultados$BIC,0),
`Média BLUE(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Valor BIC(BLUP)` = round(tab_resultados_glm$BIC,0),
`MEDIA ARITMETICA(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Local` = tab_resultados$Local,
`Cidade` = tab_resultados$Cidade,
`UF` = tab_resultados$UF,
`Irrigação` = ifelse(inputUsuario$irrigacaoInputDoencas == 't', 'Sim', 'Nao'),
`Fungicida` = ifelse(inputUsuario$fungicidaInputDoencas == 't', 'Sim', 'Nao'),
`Tipo de grão` = capture.output(cat(inputUsuario$tipodegraoInputDoencas, sep = ','))
)
indicadores_bind
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "produtividade", "cidade")]
dadosModelo = na.exclude(dadosModelo)
View(dadosModelo)
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$genotipo = as.factor(dadosModelo$genotipo)
dadosModelo$local = as.factor(dadosModelo$local)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados_glm = gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
# Obtemos assim os indicadores BLUE e BLUP
indicadores_bind = tibble(`Codigodo Experimento` = tab_resultados$id_ensaio,
`Média BLUP (kg/ha)` = round(tab_resultados$MediaPonderada,0),
`Valor BIC (BLUP)` = round(tab_resultados$BIC,0),
`Média BLUE(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Valor BIC(BLUP)` = round(tab_resultados_glm$BIC,0),
`MEDIA ARITMETICA(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Local` = tab_resultados$Local,
`Cidade` = tab_resultados$Cidade,
`UF` = tab_resultados$UF,
`Irrigação` = ifelse(inputUsuario$irrigacaoInputDoencas == 't', 'Sim', 'Nao'),
`Fungicida` = ifelse(inputUsuario$fungicidaInputDoencas == 't', 'Sim', 'Nao'),
`Tipo de grão` = capture.output(cat(inputUsuario$tipodegraoInputDoencas, sep = ','))
)
indicadores_bind
runApp()
runApp()
tabela
tabela
unique(tabela$fungicida)
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "produtividade", "cidade")]
dadosModelo = na.exclude(dadosModelo)
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$genotipo = as.factor(dadosModelo$genotipo)
dadosModelo$local = as.factor(dadosModelo$local)
unique(dadosModelo$fungicida)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados_glm = gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
# Obtemos assim os indicadores BLUE e BLUP
indicadores_bind = tibble(`Codigodo Experimento` = tab_resultados$id_ensaio,
`Média BLUP (kg/ha)` = round(tab_resultados$MediaPonderada,0),
`Valor BIC (BLUP)` = round(tab_resultados$BIC,0),
`Média BLUE(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Valor BIC(BLUP)` = round(tab_resultados_glm$BIC,0),
`MEDIA ARITMETICA(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Local` = tab_resultados$Local,
`Cidade` = tab_resultados$Cidade,
`UF` = tab_resultados$UF,
`Irrigação` = ifelse(inputUsuario$irrigacaoInputDoencas == 't', 'Sim', 'Nao'),
`Fungicida` = ifelse(inputUsuario$fungicidaInputDoencas == 't', 'Sim', 'Nao'),
`Tipo de grão` = capture.output(cat(inputUsuario$tipodegraoInputDoencas, sep = ','))
)
indicadores_bind
mdl_glm_trials
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "produtividade", "cidade")]
dadosModelo = na.exclude(dadosModelo)
dadosModelo
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$genotipo = as.factor(dadosModelo$genotipo)
dadosModelo$local = as.factor(dadosModelo$local)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
mdl_trials
unique(dadosModelo$fungicida)
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
mdl_glm_trials
mdl_glm_trials$data
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados
gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
tab_resultados$Local
inputUsuario$fungicidaInputDoencas
unique(tabela$fungicida)
irrigacao = unique(tabela$irrigacao)
irrigacao
runApp()
runApp()
shiny::runApp()
setwd("~/Projetos/Tratamento doenças")
doencas = read.csv("doenca_v1.csv")
doencas = read.csv("doenca_v1.csv", sep = ";")
View(doencas)
shiny::runApp()
runApp()
sql = 'select distinct
lo.NOME as local,
ci.NOME as cidade,
es.NOME as estado,
en.FUNGICIDA as fungicida,
en.IRRIGACAO as irrigacao,
ge.NOME as genotipo,
ti.SIGLA as tipo_de_grao,
en.REPETICAO as repeticao,
en.DATA_SEMEADURA as data_semeadura,
gd.FS as valor_FS,
gd.FO as valor_FO,
en.SAFRA as safra,
en.ID_ENSAIO as id_ensaio
from
ensaios_doencas gd
JOIN ENSAIOS en on en.ID = gd.ID_ENSAIO
JOIN genotipos ge on ge.ID = en.ID_GENOTIPO
JOIN locais lo on lo.ID = en.ID_LOCAL
JOIN cidades ci on ci.ID = lo.ID_CIDADE
JOIN estados es on es.ID = ci.ID_ESTADO
JOIN tipos_de_graos ti on ti.ID = ge.ID_TIPO_GRAO
';
runApp()
sql = 'select distinct
lo.NOME as local,
ci.NOME as cidade,
es.NOME as estado,
en.FUNGICIDA as fungicida,
en.IRRIGACAO as irrigacao,
ge.NOME as genotipo,
ti.SIGLA as tipo_de_grao,
en.REPETICAO as repeticao,
en.DATA_SEMEADURA as data_semeadura,
gd.FS as valor_FS,
gd.FO as valor_FO,
en.SAFRA as safra,
en.ID_ENSAIO as id_ensaio
from
ensaios_doencas gd
JOIN ENSAIOS en on en.ID_ENSAIO = gd.ID_ENSAIO
JOIN genotipos ge on ge.ID = en.ID_GENOTIPO
JOIN locais lo on lo.ID = en.ID_LOCAL
JOIN cidades ci on ci.ID = lo.ID_CIDADE
JOIN estados es on es.ID = ci.ID_ESTADO
JOIN tipos_de_graos ti on ti.ID = ge.ID_TIPO_GRAO
';
set.seed(12432)
dados = banco.provider.executeQuery(sql, DOENCA_DB_DATABASE)
dados = dados[,c('local', 'cidade', 'estado', 'fungicida', 'irrigacao', 'genotipo', 'tipo_de_grao', 'repeticao', 'data_semeadura', 'valor_fs', 'valor_fo', 'safra', 'id_ensaio')]
names(dados) = c('local', 'cidade', 'estado', 'fungicida', 'irrigacao', 'genotipo', 'tipo_de_grao', 'repeticao', 'data_semeadura', 'FS', 'FO', 'safra', 'id_ensaio')
View(dados)
wdata <- dados %>% filter(!is.na(FO), !is.na(FS), FO <= 10, FS <= 10) %>% mutate(FO = str_replace(FO, ",", "."),
FS = str_replace(FS, ",", ".")) %>%
mutate(FO = as.numeric(FO), FS = as.numeric(FS)) %>%
mutate(genotipo = as.factor(genotipo))
agrupados <- wdata %>% group_by(genotipo, cidade, safra) %>% dplyr::summarize(Media_fs = mean(FS),
Media_fo = mean(FO),
quantidade = n())
fo_modelo <- KMEANS(agrupados$Media_fo, k = 3)
fs_modelo <- KMEANS(agrupados$Media_fs, k = 3)
mudanca <- tibble(notas = seq(0, 10, 0.001), previsao_fs = as.factor(predict(fs_modelo, notas)),
previsao_fo = as.factor(predict(fo_modelo, notas)))
fs_mudanca <- mudanca %>% group_by(previsao_fs) %>% summarize(maximo = max(notas))
fo_mudanca <- mudanca %>% group_by(previsao_fo) %>% summarize(maximo = max(notas))
ordem_fo <- c("3", "1", "2")
ordem_fs <- c("1", "2", "3")
ordem <- c("Baixo", "Médio", "Alto")
wdata <- wdata %>% mutate(previsao_fs = factor(predict(fs_modelo, FS), levels = ordem_fs, label = ordem) ,
previsao_fo = factor(predict(fo_modelo, FO), levels = ordem_fo, label = ordem))
View(wdata)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
tabela
# Extraindo dados do filtrado
fungicidade = unique(tabela$fungicida)
irrigacao = unique(tabela$irrigacao)
fungicidade
irrigacao
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "produtividade", "cidade")]
dadosModelo = na.exclude(dadosModelo)
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$genotipo = as.factor(dadosModelo$genotipo)
dadosModelo$local = as.factor(dadosModelo$local)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados_glm = gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
# Obtemos assim os indicadores BLUE e BLUP
indicadores_bind = tibble(`Codigodo Experimento` = tab_resultados$id_ensaio,
`Média BLUP (kg/ha)` = round(tab_resultados$MediaPonderada,0),
`Valor BIC (BLUP)` = round(tab_resultados$BIC,0),
`Média BLUE(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Valor BIC(BLUP)` = round(tab_resultados_glm$BIC,0),
`MEDIA ARITMETICA(kg/ha)` = round(tab_resultados_glm$MediaPonderada,0),
`Local` = tab_resultados$Local,
`Cidade` = tab_resultados$Cidade,
`UF` = tab_resultados$UF,
`Irrigação` = fungicidade,
`Fungicida` = irrigacao,
`Tipo de grão` = capture.output(cat(inputUsuario$tipodegraoInputDoencas, sep = ','))
)
indicadores_bind
fungicidade
irrigacao
runApp()
diagnostico
diagnostico
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
sequence_length = length(unique(filt_tab_pgp$genotipo))
sequence_length = length(unique(dados$genotipo))
sequence_length
first_sequence = c(1:(sequence_length%/%2))
second_sequence = c((sequence_length%/%2+1):sequence_length)
first_angles = c(90 - 180/length(first_sequence) * first_sequence)
second_angles = c(-90 - 180/length(second_sequence) * second_sequence)
second_angles
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(
Variaveis = c(
"Cultura",
"Safra",
"Estado",
"Cidade",
"irrigacao",
"Fungicida",
"Tipo de grao",
"Epoca"
),
Selecionados = c(
input$culturaInputDoencas,
input$safraInputDoencas,
input$estadoInputDoencas,
input$cidadeInputDoencas,
input$irrigacaoInputDoencas,
input$fungicidaInputDoencas,
input$tipodegraoInputDoencas,
input$epocaInputDoencas
),
stringsAsFactors = F
)
input$epocaInputDoencas
input$epocaInputDoencas
data.frame(
Variaveis = c(
"Cultura",
"Safra",
"Estado",
"Cidade",
"irrigacao",
"Fungicida",
"Tipo de grao",
),
Selecionados = c(
input$culturaInputDoencas,
input$safraInputDoencas,
input$estadoInputDoencas,
input$cidadeInputDoencas,
input$irrigacaoInputDoencas,
input$fungicidaInputDoencas,
input$tipodegraoInputDoencas,
),
stringsAsFactors = F
)
inputRelatorioFormato
input$btnRetonarClima
data.frame(
Variaveis = c(
"Cultura",
"Safra",
"Estado",
"Cidade",
"irrigacao",
"Fungicida",
"Tipo de grao",
"Epoca"
),
Selecionados = c(
input$culturaInputDoencas,
input$safraInputDoencas,
input$estadoInputDoencas,
input$cidadeInputDoencas,
input$irrigacaoInputDoencas,
input$fungicidaInputDoencas,
input$tipodegraoInputDoencas,
input$epocaInputDoencas
),
stringsAsFactors = F
)
runApp()
runApp()
Selecionados = c(
input$culturaInputDoencas,
input$safraInputDoencas,
input$estadoInputDoencas,
input$cidadeInputDoencas,
input$irrigacaoInputDoencas,
input$fungicidaInputDoencas,
input$tipodegraoInputDoencas,
input$epocaInputDoencas
)
Selecionados
input$culturaInputDoencas,
input$culturaInputDoencas
input$safraInputDoencas
input$estadoInputDoencas
input$cidadeInputDoencas
input$irrigacaoInputDoencas
input$fungicidaInputDoencas
input$tipodegraoInputDoencas
input$epocaInputDoenca
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(plotly)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
sql = 'select distinct
lo.NOME as local,
ci.NOME as cidade,
es.NOME as estado,
en.FUNGICIDA as fungicida,
en.IRRIGACAO as irrigacao,
ge.NOME as genotipo,
ti.SIGLA as tipo_de_grao,
en.REPETICAO as repeticao,
en.DATA_SEMEADURA as data_semeadura,
gd.FS as valor_FS,
gd.FO as valor_FO,
en.SAFRA as safra,
en.ID_ENSAIO as id_ensaio
from
ensaios_doencas gd
JOIN ENSAIOS en on en.ID = gd.ID_ENSAIO
JOIN genotipos ge on ge.ID = en.ID_GENOTIPO
JOIN locais lo on lo.ID = en.ID_LOCAL
JOIN cidades ci on ci.ID = lo.ID_CIDADE
JOIN estados es on es.ID = ci.ID_ESTADO
JOIN tipos_de_graos ti on ti.ID = ge.ID_TIPO_GRAO';
set.seed(12432)
dados = banco.provider.executeQuery(sql, DOENCA_DB_DATABASE)
view(dados)
dados = dados[,c('local', 'cidade', 'estado', 'fungicida', 'irrigacao', 'genotipo', 'tipo_de_grao', 'repeticao', 'data_semeadura', 'valor_fs', 'valor_fo', 'safra', 'id_ensaio')]
names(dados) = c('local', 'cidade', 'estado', 'fungicida', 'irrigacao', 'genotipo', 'tipo_de_grao', 'repeticao', 'data_semeadura', 'FS', 'FO', 'safra', 'id_ensaio')
wdata <- dados %>% filter(!is.na(FO), !is.na(FS), FO <= 10, FS <= 10) %>% mutate(FO = str_replace(FO, ",", "."),
FS = str_replace(FS, ",", ".")) %>%
mutate(FO = as.numeric(FO), FS = as.numeric(FS)) %>%
mutate(genotipo = as.factor(genotipo))
agrupados <- wdata %>% group_by(genotipo, cidade, safra) %>% dplyr::summarize(Media_fs = mean(FS),
Media_fo = mean(FO),
quantidade = n())
fo_modelo <- KMEANS(agrupados$Media_fo, k = 3)
fs_modelo <- KMEANS(agrupados$Media_fs, k = 3)
mudanca <- tibble(notas = seq(0, 10, 0.001), previsao_fs = as.factor(predict(fs_modelo, notas)),
previsao_fo = as.factor(predict(fo_modelo, notas)))
fs_mudanca <- mudanca %>% group_by(previsao_fs) %>% summarize(maximo = max(notas))
fo_mudanca <- mudanca %>% group_by(previsao_fo) %>% summarize(maximo = max(notas))
ordem_fo <- c("3", "1", "2")
ordem_fs <- c("1", "2", "3")
ordem <- c("Baixo", "Médio", "Alto")
wdata <- wdata %>% mutate(previsao_fs = factor(predict(fs_modelo, FS), levels = ordem_fs, label = ordem) ,
previsao_fo = factor(predict(fo_modelo, FO), levels = ordem_fo, label = ordem))
runApp()
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
grupo_maturacao,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
dados = banco.provider.executeQuery(statement, DOENCA_DB_DATABASE)
View(dados)
runApp()
runApp()
runApp()
g = ggplot(data = data_plot, aes(x=reorder(gid,predicts), y=predicts)) +
geom_boxplot( fill = "lightyellow") +
stat_boxplot(geom ='errorbar') +
xlab("Genótipos") +
ylab("Produtividade estimada") +
coord_flip() +
theme_light() +
facet_grid(~site)
g
attr(g)
g
class(g)
print(g)
ggplot_build(g)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
dados
plot = dados %>% ggplot(aes(x = genotipo, y = notas, fill = notas, label = round(notas,1))) +
geom_col(width = 0.85, colour = "black") +
coord_polar() +
scale_fill_gradientn(colors = c("red","yellow","green")) +
theme_minimal() +
geom_text(position=position_stack(vjust=0.8), size = 2.8) +
theme(axis.title=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed',
colour = "darkgray"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed',
colour = "darkgray")) +
labs(fill = "PGP")
x11()
plot
