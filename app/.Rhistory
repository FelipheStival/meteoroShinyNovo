runApp()
runApp()
runApp()
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = naCounter)
naTabela = melt(naTabela, id.vars = "id_ensaio")
names(naTabela) = c("Experimento", "Variavel", "Valor")
x11()
ggplot(data = naTabela, aes(x = Variavel, y = Experimento)) + geom_tile(aes(fill = Valor), colour = "white") +
scale_fill_gradient(low = "#7cb342", high = "#e53935") + theme_minimal() +
theme(text = element_text(size = 15))
runApp()
runApp()
tabela
View(tabela)
runApp()
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
View(subsetTabela)
clas
class(subsetTabela$produtividade)
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = naCounter)
naTabela = melt(naTabela, id.vars = "id_ensaio")
View(naTabela)
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
subsetTabela
View(naTabela)
runApp()
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
View(subsetTabela)
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
naTabela
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = naCounter)
View(naTabela)
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = sum)
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = sum)
View(naTabela)
naTabela = melt(naTabela, id.vars = "id_ensaio")
View(naTabela)
runApp()
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = sum)
naTabela = melt(naTabela, id.vars = "id_ensaio")
names(naTabela) = c("Experimento", "Variavel", "Valor")
View(naTabela)
View(naTabela)
runApp()
(
runApp()
Q
runApp()
runApp()
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "epoca", "produtividade", "cidade")]
# Obtendo dados necessarios para gerar modelo
dadosModelo = tabela[,c("id_ensaio", "genotipo", "repeticao", "safra", "cidade", "local", "irrigacao","fungicida","estado","tipo_de_grao", "produtividade", "cidade")]
View(dadosModelo)
dadosModelo = na.exclude(dadosModelo)
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$epoca = as.factor(dadosModelo$epoca)
# Preparando dados
dadosModelo$repeticao = as.character(dadosModelo$repeticao)
dadosModelo$genotipo = as.factor(dadosModelo$genotipo)
dadosModelo$local = as.factor(dadosModelo$local)
# Definindo o modelo de diagnostico dos experimentos
mdl_trials = lmer(produtividade ~ repeticao + (1|genotipo), data = dadosModelo, REML = TRUE)
mdl_trials
# Modelo linear (sem o efeito aleatório)
mdl_glm_trials = glm(produtividade ~ repeticao, data = dadosModelo, family = gaussian(link='identity'))
mdl_glm_trials
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
tab_resultados_glm = gera_tabela_por_trial_glm(dadosModelo, mdl_glm_trials, "repeticao")$tab
tab_resultados_glm
mdl_glm_trials
# "genotipo" é a entrada da variável com efeito aleatório
# "repeticao" é a entrada como efeito fixo
tab_resultados = gera_tabela_por_trial(dadosModelo, mdl_trials, "repeticao", "genotipo")$tab
runApp()
runApp()
trial
localExperimento
cidadeExperimento
localExperimento <- unique(data_up$local)
cidadeExperimento <- unique(data_up$cidade)
ufExperimento <- unique(data_up$estado)
mediaProducao <- median(data_up$produtividade)
tab_results <- rbind(tab_results,
tibble(id_ensaio = trial,
MediaPonderada = NA,
BIC = NA,
Local = localExperimento,
Cidade = cidadeExperimento,
UF = ufExperimento)
)
tab_results
runApp()
runApp()
runApp()
dadosFiltrados()
runApp()
runApp()
Y = model.Values(tabela)
runApp()
tabela
view(tabela)
runApp()
runApp()
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
dados = banco.provider.executeQuery(statement, DOENCA_DB_DATABASE)
dados
view(dados)
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
dados = banco.provider.executeQuery(statement, DOENCA_DB_DATABASE)
view(dados)
month(dados$data_semeadura)
# Recriando ID ensaio para analises
dados$id_ensaio = paste(
dados$cidade,
dados$local,
dados$safra,
month(dados$data_semeadura),
dados$irrigacao,
dados$fungicida
)
View(dados)
dados[dados$irrigacao == 't']
dados[dados$irrigacao == 't', 'irrigacao']
View(dados)
dados$irrigacao = dados[dados$irrigacao == 't', 'irrigacao'] = 'sim'
dados$irrigacao = dados[dados$irrigacao == 'f', 'irrigacao'] = 'nao'
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
dados = banco.provider.executeQuery(statement, DOENCA_DB_DATABASE)
dados$irrigacao = dados[dados$irrigacao == 't', 'irrigacao'] = 'sim'
dados$irrigacao = dados[dados$irrigacao == 'f', 'irrigacao'] = 'nao'
dados$fungicida = dados[dados$fungicida == 't', 'fungicida'] = 'com'
dados$fungicida = dados[dados$fungicida == 'f', 'fungicida'] = 'sem'
# Recriando ID ensaio para analises
dados$id_ensaio = paste(
dados$cidade,
dados$local,
dados$safra,
month(dados$data_semeadura),
dados$irrigacao,
dados$fungicida
)
View(dados)
# Recriando ID ensaio para analises
dados$id_ensaio = paste(
dados$cidade,
dados$local,
dados$safra,
month(dados$data_semeadura),
dados$irrigacao,
dados$fungicida,
sep = '_'
)
View(dados)
runApp()
dados[dados$irrigacao == 'f', 'irrigacao']
dados$irrigacao = dados[dados$irrigacao == 't', 'irrigacao'] = 'sim'
dados$irrigacao = dados[dados$irrigacao == 'f', 'irrigacao'] = 'nao'
dados$fungicida = dados[dados$fungicida == 't', 'fungicida'] = 'com'
dados$fungicida = dados[dados$fungicida == 'f', 'fungicida'] = 'sem'
teste = dados[dados$fungicida == 'com',]
statement = "SELECT ensaios.id,
id_ensaio,
estados.nome as estado,
cidades.nome as cidade,
locais.nome as local,
tipos_de_graos.sigla as tipo_de_grao,
genotipos.nome as genotipo,
safra,
repeticao,
produtividade as produtividade,
data_semeadura,
data_emergencia,
data_inicio_floracao,
data_inicio_ponto_colheita,
data_inicio_colheita,
cultura.nome as cultura,
locais.nome as local,
irrigacao,
fungicida,
cultura.nome as cultura
FROM public.ensaios
JOIN genotipos ON ensaios.id_genotipo = genotipos.id
JOIN locais ON ensaios.id_local = locais.id
JOIN cidades ON locais.id_cidade = cidades.id
JOIN estados ON cidades.id_estado = estados.id
JOIN tipos_de_graos ON genotipos.id_tipo_grao = tipos_de_graos.id
JOIN cultura ON ensaios.id_cultura = cultura.id"
teste = dados[dados$fungicida == 'f',]
dados[dados$fungicida == 'f', 'fungicida']
dados = banco.provider.executeQuery(statement, DOENCA_DB_DATABASE)
dados[dados$fungicida == 'f', 'fungicida']
dados[dados$fungicida == 'f', 'fungicida']
dados[dados$fungicida == 'f', 'fungicida']
teste = dados[dados$fungicida == 'f',]
View(teste)
dados[dados$irrigacao == 't', 'irrigacao'] = 'sim'
dados[dados$irrigacao == 't', 'irrigacao'] = 'sim'
dados[dados$irrigacao == 'f', 'irrigacao'] = 'nao'
dados[dados$fungicida == 't', 'fungicida'] = 'com'
dados[dados$fungicida == 'f', 'fungicida'] = 'sem'
View(dados)
# Recriando ID ensaio para analises
dados$id_ensaio = paste(
dados$cidade,
dados$local,
dados$safra,
month(dados$data_semeadura),
dados$irrigacao,
dados$fungicida,
sep = '_'
)
View(dados)
runApp()
# modelo de efeito fixo
fixed = dlply(tabela, .(id_ensaio), function(x)
lm(produtividade ~ genotipo, x))
means = llply(fixed, function(x)
mean_fun(x, tabela, spec = "genotipo"))
means
runApp()
runApp()
runApp()
dadosFiltrados()
runApp()
# Criando data.frame a ser filtrado
filtrado = dados
View(filtrado)
# Checando todos
indexCultura = which(input[['culturaInputDoencas']] == "Todos")
indexCidade = which(input[['cidadeInputDoencas']] == "Todos")
indexEstado = which(input[['estadoInputDoencas']] == "Todos")
indexTipoGrao = which(input[['tipodegraoInputDoencas']] == "Todos")
indexEpoca = which(input[['epocaInputDoencas']] == "Todos")
indexSafra = which(input[['safraInputDoencas']] == "Todos")
indexCategoria =  which(input[['categoriaInputDoencas']] == "Todos")
indexEpoca
length(indexCultura) == 0 & !is.null(input$culturaInputDoencas)
length(indexSafra) == 0 & !is.null(input$safraInputDoencas)
# Filtrando cultura
if(length(indexCultura) == 0 & !is.null(input$culturaInputDoencas)){
filtrado = filtrado[filtrado$cultura %in% input$culturaInputDoencas,]
}
# Filtrando cidade
if(length(indexCidade) == 0 & !is.null(input$cidadeInputDoencas)){
filtrado = filtrado[filtrado$cidade %in% input$cidadeInputDoencas,]
}
# Filtrando estado
if(length(indexEstado) == 0 & !is.null(input$estadoInputDoencas)){
filtrado = filtrado[filtrado$estado %in% input$estadoInputDoencas, ]
}
# Filtrando tipo de grao
if(length(indexTipoGrao) == 0 & !is.null(input$tipodegraoInputDoencas)){
filtrado = filtrado[filtrado$tipo_de_grao %in% input$tipodegraoInputDoencas, ]
}
# Filtrando safra
if(length(indexSafra) == 0 & !is.null(input$safraInputDoencas)){
filtrado = filtrado[filtrado$safra %in% input$safraInputDoencas, ]
}
# Filtrando categoria
if(length(indexSafra) == 0 & !is.null(input$safraInputDoencas)){
filtrado = filtrado[filtrado$safra %in% input$safraInputDoencas, ]
}
filtrado$irrigacao
input$irrigacaoInputDoencas
# Filtrando irrigacao e fungicida
filtrado = filtrado[filtrado$irrigacao %in% input$irrigacaoInputDoencas &
filtrado$fungicida %in% input$fungicidaInputDoencas,
]
runApp()
runApp()
runApp()
runApp()
runApp()
tabela
View(tabela)
namesIndex = which(
names(tabela) %in% c(
"id_ensaio",
"flor_das",
"flor_dae",
"ciclo_das",
"ciclo_dae",
"produtividade"
)
)
subsetTabela = tabela[, namesIndex]
View(tabela)
naTabela = melt(subsetTabela, id.vars = "id_ensaio")
View(naTabela)
naTabela = dcast(naTabela,
id_ensaio ~ variable,
value.var = "value",
fun.aggregate = naCounter)
naTabela = melt(naTabela, id.vars = "id_ensaio")
View(naTabela)
runApp()
tabela
runApp()
shiny::runApp()
shiny::runApp()
?secure_app
runApp()
?secure_app
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
plot = ggplot(dados %>% filter(local == localInput), aes(x = genotipo, y = notas, fill = notas, label = round(notas,1))) +
geom_col(width = 0.85, colour = "black") +
coord_polar() +
scale_fill_gradientn(colors = c("red","yellow","green")) +
theme_minimal() +
geom_text(position=position_stack(vjust=0.8), size = 2.8) +
theme(axis.title=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_text(face= "bold", size = 11),
axis.ticks=element_blank(),
panel.grid.major = element_line(size = 0.5, linetype = 'dashed',
colour = "black"),
panel.grid.minor = element_line(size = 0.25, linetype = 'dashed',
colour = "black")) +
labs(fill = "PGP")
x11()
plot
